import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import requests
from io import StringIO

# Step 1: Load the data directly from the URL
url = "https://raw.githubusercontent.com/HackBio-Internship/2025_project_collection/refs/heads/main/Python/Dataset/Pesticide_treatment_data.txt"
response = requests.get(url)
df = pd.read_csv(StringIO(response.text), sep="\t")
df = df.set_index(df.columns[0]).T  # Transpose: rows = samples, columns = metabolites

# Step 2: Annotate each sample with type and treatment
def parse_sample_name(name):
    print(f"Parsing sample: {name}")  # Print each sample name to inspect its format
    name = name.upper()  # Convert to uppercase for consistent matching
    parts = name.split('_')

    # Determine type
    if 'WT' in parts:
        sample_type = 'WT'
    elif 'MUT' in parts:
        sample_type = 'mutant'
    else:
        sample_type = 'unknown'

    # Determine treatment
    if 'DMSO' in parts:
        treatment = 'DMSO'
    elif '0H' in parts:
        treatment = '0h'
    elif '8H' in parts:
        treatment = '8h'
    elif '24H' in parts:
        treatment = '24h'
    else:
        treatment = 'unknown'

    return sample_type, treatment

# Apply the annotation function to the index
sample_info = df.index.to_series().apply(lambda name: pd.Series(parse_sample_name(name), index=['Type', 'Treatment']))
df_meta = df.copy()
df_meta[['Type', 'Treatment']] = sample_info

# Debugging: Check the unique values in 'Type' and 'Treatment' columns
print("Unique types and treatments:")
print(df_meta[['Type', 'Treatment']].drop_duplicates())

# Step 3: Compute average per treatment group
grouped = df_meta.groupby(['Type', 'Treatment']).mean()

# Step 4: Calculate ΔM (metabolite change) between 24h and DMSO for WT and mutant
# Check if the keys exist in the grouped DataFrame index before accessing them
# If not, print a message and skip the calculation
try:
    delta_wt = grouped.loc[('WT', '24h')] - grouped.loc[('WT', 'DMSO')]
    delta_mutant = grouped.loc[('mutant', '24h')] - grouped.loc[('mutant', 'DMSO')]
except KeyError as e:
    print(f"KeyError: {e}. Check if the specified type and treatment combination exists in the data.")
    print("Available groups:", grouped.index.levels)
    # Handle the KeyError, e.g., assign default values or skip the calculation
    delta_wt = pd.Series(0, index=grouped.columns)  # Assign 0 to delta_wt to avoid further errors
    delta_mutant = pd.Series(0, index=grouped.columns)  # Assign 0 to delta_mutant to avoid further errors

# Step 5: Create a scatter plot
plt.figure(figsize=(10, 8))
scatter_df = pd.DataFrame({'WT': delta_wt, 'Mutant': delta_mutant})
scatter_df['Residual'] = scatter_df['Mutant'] - scatter_df['WT']  # residuals from line y = x

# Step 6: Apply residual threshold for coloring
residual_cutoff = 0.3
scatter_df['Color'] = scatter_df['Residual'].apply(
    lambda r: 'grey' if abs(r) <= residual_cutoff else 'salmon'
)

sns.scatterplot(data=scatter_df, x='WT', y='Mutant', hue='Color', palette={'grey': 'grey', 'salmon': 'salmon'})
plt.plot([-5, 5], [-5, 5], 'k--')  # Line y = x
plt.axhline(0, color='black', linewidth=0.5)
plt.axvline(0, color='black', linewidth=0.5)
plt.title("ΔM Scatter Plot: Mutant vs WT (24h - DMSO)")
plt.xlabel("ΔM WT")
plt.ylabel("ΔM Mutant")
plt.legend(title="Residual Threshold")
plt.grid(True)
plt.tight_layout()
plt.show()

# Step 7: Print metabolites with significant deviations
outliers = scatter_df[scatter_df['Color'] == 'salmon']
print("Outlier Metabolites (|residual| > 0.3):")
print(outliers.index.tolist())

# Step 8: Plot line plots for 6 outliers
selected_metabolites = outliers.index[:6]  # Pick the first 6 outliers
timepoints = ['0h', '8h', '24h']

plt.figure(figsize=(15, 10))
for i, metabolite in enumerate(selected_metabolites):
    plt.subplot(2, 3, i + 1)
    for group in ['WT', 'mutant']:
        values = [grouped.loc[(group, t)][metabolite] for t in timepoints]
        plt.plot(timepoints, values, marker='o', label=group)
    plt.title(metabolite)
    plt.xlabel("Time")
    plt.ylabel("Metabolite Level")
    plt.legend()
    plt.grid(True)

plt.suptitle("Time-course of Selected Outlier Metabolites")
plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()
